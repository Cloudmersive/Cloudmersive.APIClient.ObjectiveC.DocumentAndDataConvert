#import <Foundation/Foundation.h>
#import "CMBase64DecodeRequest.h"
#import "CMBase64DecodeResponse.h"
#import "CMBase64DetectRequest.h"
#import "CMBase64DetectResponse.h"
#import "CMBase64EncodeRequest.h"
#import "CMBase64EncodeResponse.h"
#import "CMChangeLineEndingResponse.h"
#import "CMDetectLineEndingsResponse.h"
#import "CMFindStringRegexRequest.h"
#import "CMFindStringRegexResponse.h"
#import "CMFindStringSimpleRequest.h"
#import "CMFindStringSimpleResponse.h"
#import "CMRemoveHtmlFromTextRequest.h"
#import "CMRemoveHtmlFromTextResponse.h"
#import "CMRemoveWhitespaceFromTextRequest.h"
#import "CMRemoveWhitespaceFromTextResponse.h"
#import "CMReplaceStringRegexRequest.h"
#import "CMReplaceStringRegexResponse.h"
#import "CMReplaceStringSimpleRequest.h"
#import "CMReplaceStringSimpleResponse.h"
#import "CMTextEncodingDetectResponse.h"
#import "CMApi.h"

/**
* convertapi
* Convert API lets you effortlessly convert file formats and types.
*
* OpenAPI spec version: v1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface CMEditTextApi: NSObject <CMApi>

extern NSString* kCMEditTextApiErrorDomain;
extern NSInteger kCMEditTextApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(CMApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Base 64 decode, convert base 64 string to binary content
/// Decodes / converts base 64 UTF-8 text string to binary content
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMBase64DecodeResponse*
-(NSURLSessionTask*) editTextBase64DecodeWithRequest: (CMBase64DecodeRequest*) request
    completionHandler: (void (^)(CMBase64DecodeResponse* output, NSError* error)) handler;


/// Detect, check if text string is base 64 encoded
/// Checks, detects if input string is base 64 encoded
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMBase64DetectResponse*
-(NSURLSessionTask*) editTextBase64DetectWithRequest: (CMBase64DetectRequest*) request
    completionHandler: (void (^)(CMBase64DetectResponse* output, NSError* error)) handler;


/// Base 64 encode, convert binary or file data to a text string
/// Encodes / converts binary or file data to a text string
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMBase64EncodeResponse*
-(NSURLSessionTask*) editTextBase64EncodeWithRequest: (CMBase64EncodeRequest*) request
    completionHandler: (void (^)(CMBase64EncodeResponse* output, NSError* error)) handler;


/// Set, change line endings of a text file
/// Sets the line ending type of a text file; set to Windows, Unix or Mac.
///
/// @param lineEndingType Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return CMChangeLineEndingResponse*
-(NSURLSessionTask*) editTextChangeLineEndingsWithLineEndingType: (NSString*) lineEndingType
    inputFile: (NSURL*) inputFile
    completionHandler: (void (^)(CMChangeLineEndingResponse* output, NSError* error)) handler;


/// Detect line endings of a text file
/// Detect line ending type (Windows, Unix or Mac) of an input file.
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return CMDetectLineEndingsResponse*
-(NSURLSessionTask*) editTextDetectLineEndingsWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(CMDetectLineEndingsResponse* output, NSError* error)) handler;


/// Find a regular expression regex in text input
/// Find all occurrences of the input regular expression in the input content, and returns the matches
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMFindStringRegexResponse*
-(NSURLSessionTask*) editTextFindRegexWithRequest: (CMFindStringRegexRequest*) request
    completionHandler: (void (^)(CMFindStringRegexResponse* output, NSError* error)) handler;


/// Find a string in text input
/// Finds all occurrences of the input string in the input content, and returns the matches
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMFindStringSimpleResponse*
-(NSURLSessionTask*) editTextFindSimpleWithRequest: (CMFindStringSimpleRequest*) request
    completionHandler: (void (^)(CMFindStringSimpleResponse* output, NSError* error)) handler;


/// Remove whitespace from text string
/// Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMRemoveWhitespaceFromTextResponse*
-(NSURLSessionTask*) editTextRemoveAllWhitespaceWithRequest: (CMRemoveWhitespaceFromTextRequest*) request
    completionHandler: (void (^)(CMRemoveWhitespaceFromTextResponse* output, NSError* error)) handler;


/// Remove HTML from text string
/// Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMRemoveHtmlFromTextResponse*
-(NSURLSessionTask*) editTextRemoveHtmlWithRequest: (CMRemoveHtmlFromTextRequest*) request
    completionHandler: (void (^)(CMRemoveHtmlFromTextResponse* output, NSError* error)) handler;


/// Replace a string in text with a regex regular expression string
/// Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMReplaceStringRegexResponse*
-(NSURLSessionTask*) editTextReplaceRegexWithRequest: (CMReplaceStringRegexRequest*) request
    completionHandler: (void (^)(CMReplaceStringRegexResponse* output, NSError* error)) handler;


/// Replace a string in text with another string value
/// Replaces all occurrences of the input string in the input content, and returns the result
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMReplaceStringSimpleResponse*
-(NSURLSessionTask*) editTextReplaceSimpleWithRequest: (CMReplaceStringSimpleRequest*) request
    completionHandler: (void (^)(CMReplaceStringSimpleResponse* output, NSError* error)) handler;


/// Detect text encoding of file
/// Checks text encoding of file
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return CMTextEncodingDetectResponse*
-(NSURLSessionTask*) editTextTextEncodingDetectWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(CMTextEncodingDetectResponse* output, NSError* error)) handler;


/// Trim leading and trailing whitespace from text string
/// Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
///
/// @param request Input request
/// 
///  code:200 message:"OK"
///
/// @return CMRemoveWhitespaceFromTextResponse*
-(NSURLSessionTask*) editTextTrimWhitespaceWithRequest: (CMRemoveWhitespaceFromTextRequest*) request
    completionHandler: (void (^)(CMRemoveWhitespaceFromTextResponse* output, NSError* error)) handler;



@end
