#import <Foundation/Foundation.h>
#import "CMAddPdfAnnotationRequest.h"
#import "CMGetPdfAnnotationsResult.h"
#import "CMPdfFormFields.h"
#import "CMPdfMetadata.h"
#import "CMPdfTextByPageResult.h"
#import "CMSetPdfFormFieldsRequest.h"
#import "CMSetPdfMetadataRequest.h"
#import "CMApi.h"

/**
* convertapi
* Convert API lets you effortlessly convert file formats and types.
*
* OpenAPI spec version: v1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface CMEditPdfApi: NSObject <CMApi>

extern NSString* kCMEditPdfApiErrorDomain;
extern NSInteger kCMEditPdfApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(CMApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add one or more PDF annotations, comments in the PDF document
/// Adds one or more annotations, comments to a PDF document.
///
/// @param request 
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfAddAnnotationsWithRequest: (CMAddPdfAnnotationRequest*) request
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Convert a PDF file to PDF/A
/// Converts the input PDF file to a PDF/A-1b or PDF/A-2b standardized PDF.
///
/// @param inputFile Input file to perform the operation on.
/// @param conformanceLevel Optional: Select the conformance level for PDF/A - specify &#39;1b&#39; for PDF/A-1b or specify &#39;2b&#39; for PDF/A-2b; default is PDF/A-1b (optional)
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfConvertToPdfAWithInputFile: (NSURL*) inputFile
    conformanceLevel: (NSString*) conformanceLevel
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Decrypt and password-protect a PDF
/// Decrypt a PDF document with a password.  Decrypted PDF will no longer require a password to open.
///
/// @param password Valid password for the PDF file
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfDecryptWithPassword: (NSString*) password
    inputFile: (NSURL*) inputFile
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Remove, delete pages from a PDF document
/// Remove one or more pages from a PDF document
///
/// @param inputFile Input file to perform the operation on.
/// @param pageStart Page number (1 based) to start deleting pages from (inclusive).
/// @param pageEnd Page number (1 based) to stop deleting pages from (inclusive).
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfDeletePagesWithInputFile: (NSURL*) inputFile
    pageStart: (NSNumber*) pageStart
    pageEnd: (NSNumber*) pageEnd
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Encrypt and password-protect a PDF
/// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
///
/// @param inputFile Input file to perform the operation on.
/// @param userPassword Password of a user (reader) of the PDF file (optional)
/// @param ownerPassword Password of a owner (creator/editor) of the PDF file (optional)
/// @param encryptionKeyLength Possible values are \&quot;128\&quot; (128-bit RC4 encryption) and \&quot;256\&quot; (256-bit AES encryption).  Default is 256. (optional)
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfEncryptWithInputFile: (NSURL*) inputFile
    userPassword: (NSString*) userPassword
    ownerPassword: (NSString*) ownerPassword
    encryptionKeyLength: (NSString*) encryptionKeyLength
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Get PDF annotations, including comments in the document
/// Enumerates the annotations, including comments and notes, in a PDF document.
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return CMGetPdfAnnotationsResult*
-(NSURLSessionTask*) editPdfGetAnnotationsWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(CMGetPdfAnnotationsResult* output, NSError* error)) handler;


/// Gets PDF Form fields and values
/// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return CMPdfFormFields*
-(NSURLSessionTask*) editPdfGetFormFieldsWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(CMPdfFormFields* output, NSError* error)) handler;


/// Get PDF document metadata
/// Returns the metadata from the PDF document, including Title, Author, etc.
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return CMPdfMetadata*
-(NSURLSessionTask*) editPdfGetMetadataWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(CMPdfMetadata* output, NSError* error)) handler;


/// Get text in a PDF document by page
/// Gets the text in a PDF by page
///
/// @param inputFile Input file to perform the operation on.
/// @param textFormattingMode Optional; specify how whitespace should be handled when converting the document to text.  Possible values are &#39;preserveWhitespace&#39; which will attempt to preserve whitespace in the document and relative positioning of text within the document, and &#39;minimizeWhitespace&#39; which will not insert additional spaces into the document in most cases.  Default is &#39;preserveWhitespace&#39;. (optional)
/// 
///  code:200 message:"OK"
///
/// @return CMPdfTextByPageResult*
-(NSURLSessionTask*) editPdfGetPdfTextByPagesWithInputFile: (NSURL*) inputFile
    textFormattingMode: (NSString*) textFormattingMode
    completionHandler: (void (^)(CMPdfTextByPageResult* output, NSError* error)) handler;


/// Insert, copy pages from one PDF document into another
/// Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
///
/// @param sourceFile Source PDF file to copy pages from.
/// @param destinationFile Destination PDF file to copy pages into.
/// @param pageStartSource Page number (1 based) to start copying pages from (inclusive) in the Source file.
/// @param pageEndSource Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.
/// @param pageInsertBeforeDesitnation Page number (1 based) to insert the pages before in the Destination file.
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfInsertPagesWithSourceFile: (NSURL*) sourceFile
    destinationFile: (NSURL*) destinationFile
    pageStartSource: (NSNumber*) pageStartSource
    pageEndSource: (NSNumber*) pageEndSource
    pageInsertBeforeDesitnation: (NSNumber*) pageInsertBeforeDesitnation
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Linearize and optimize a PDF for streaming download
/// Linearizes the content of a PDF to optimize it for streaming download, particularly over web streaming.
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfLinearizeWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Rasterize a PDF to an image-based PDF
/// Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfRasterizeWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Reduce the file size and optimize a PDF
/// Reduces the file size and optimizes the content of a PDF to minimize its file size.
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfReduceFileSizeWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Remove all PDF annotations, including comments in the document
/// Removes all of the annotations, including comments and notes, in a PDF document.
///
/// @param inputFile Input file to perform the operation on.
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfRemoveAllAnnotationsWithInputFile: (NSURL*) inputFile
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Remove a specific PDF annotation, comment in the document
/// Removes a specific annotation in a PDF document, using the AnnotationIndex.  To enumerate AnnotationIndex for all of the annotations in the PDF document, use the /edit/pdf/annotations/list API.
///
/// @param inputFile Input file to perform the operation on.
/// @param annotationIndex The 0-based index of the annotation in the document
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfRemoveAnnotationItemWithInputFile: (NSURL*) inputFile
    annotationIndex: (NSNumber*) annotationIndex
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Change PDF Document's Paper Size
/// Resizes a PDF document's paper size.
///
/// @param inputFile Input file to perform the operation on.
/// @param paperSize The desired paper size for the resized PDF document. Size ranges from A7 (smallest) to A0 (largest).
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfResizeWithInputFile: (NSURL*) inputFile
    paperSize: (NSString*) paperSize
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Rotate all pages in a PDF document
/// Rotate all of the pages in a PDF document by a multiple of 90 degrees
///
/// @param inputFile Input file to perform the operation on.
/// @param rotationAngle The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc.
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfRotateAllPagesWithInputFile: (NSURL*) inputFile
    rotationAngle: (NSNumber*) rotationAngle
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Rotate a range, subset of pages in a PDF document
/// Rotate a range of specific pages in a PDF document by a multiple of 90 degrees
///
/// @param inputFile Input file to perform the operation on.
/// @param rotationAngle The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc.
/// @param pageStart Page number (1 based) to start rotating pages from (inclusive).
/// @param pageEnd Page number (1 based) to stop rotating pages from (inclusive).
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfRotatePageRangeWithInputFile: (NSURL*) inputFile
    rotationAngle: (NSNumber*) rotationAngle
    pageStart: (NSNumber*) pageStart
    pageEnd: (NSNumber*) pageEnd
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Sets ands fills PDF Form field values
/// Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
///
/// @param fieldValues 
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfSetFormFieldsWithFieldValues: (CMSetPdfFormFieldsRequest*) fieldValues
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Sets PDF document metadata
/// Sets (writes) metadata into the input PDF document, including Title, Author, etc.
///
/// @param request 
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfSetMetadataWithRequest: (CMSetPdfMetadataRequest*) request
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Encrypt, password-protect and set restricted permissions on a PDF
/// Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
///
/// @param ownerPassword Password of a owner (creator/editor) of the PDF file (required)
/// @param userPassword Password of a user (reader) of the PDF file (optional)
/// @param inputFile Input file to perform the operation on.
/// @param encryptionKeyLength Possible values are \&quot;128\&quot; (128-bit RC4 encryption) and \&quot;256\&quot; (256-bit AES encryption).  Default is 256. (optional)
/// @param allowPrinting Set to false to disable printing through DRM.  Default is true. (optional)
/// @param allowDocumentAssembly Set to false to disable document assembly through DRM.  Default is true. (optional)
/// @param allowContentExtraction Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)
/// @param allowFormFilling Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)
/// @param allowEditing Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)
/// @param allowAnnotations Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)
/// @param allowDegradedPrinting Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfSetPermissionsWithOwnerPassword: (NSString*) ownerPassword
    userPassword: (NSString*) userPassword
    inputFile: (NSURL*) inputFile
    encryptionKeyLength: (NSString*) encryptionKeyLength
    allowPrinting: (NSNumber*) allowPrinting
    allowDocumentAssembly: (NSNumber*) allowDocumentAssembly
    allowContentExtraction: (NSNumber*) allowContentExtraction
    allowFormFilling: (NSNumber*) allowFormFilling
    allowEditing: (NSNumber*) allowEditing
    allowAnnotations: (NSNumber*) allowAnnotations
    allowDegradedPrinting: (NSNumber*) allowDegradedPrinting
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;


/// Add a text watermark to a PDF
/// Adds a text watermark to a PDF
///
/// @param watermarkText Watermark text to add to the PDF (required)
/// @param inputFile Input file to perform the operation on.
/// @param fontName Font Family Name for the watermark text; default is Times New Roman (optional)
/// @param fontSize Font Size in points of the text; default is 150 (optional)
/// @param fontColor Font color in hexadecimal or HTML color name; default is Red (optional)
/// @param fontTransparency Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)
/// 
///  code:200 message:"OK"
///
/// @return NSData*
-(NSURLSessionTask*) editPdfWatermarkTextWithWatermarkText: (NSString*) watermarkText
    inputFile: (NSURL*) inputFile
    fontName: (NSString*) fontName
    fontSize: (NSNumber*) fontSize
    fontColor: (NSString*) fontColor
    fontTransparency: (NSNumber*) fontTransparency
    completionHandler: (void (^)(NSData* output, NSError* error)) handler;



@end
